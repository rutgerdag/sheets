(function (){
'use strict';

// Charactersheets controller
angular.module('charactersheets')
// 	.filter('unique', function() {
//     return function(collection, primaryKey) { //no need for secondary key
//       var output = [], 
//           keys = [];
//           var splitKeys = primaryKey.split('.'); //split by period


//       angular.forEach(collection, function(item) {
//             var key = {};
//             angular.copy(item, key);
//             for(var i=0; i<splitKeys.length; i++){
//                 key = key[splitKeys[i]];    //the beauty of loosely typed js :)
//             }

//             if(keys.indexOf(key) === -1) {
//               keys.push(key);
//               output.push(item);
//             }
//       });

//       return output;
//     };
// })
//for each row in the professions array, multiply the level times the cost and add it to the running sum.
	.filter('totalSkillPointsSpent', function() {
	    return function(data, key1, key2) {
	      if (angular.isUndefined(data) || angular.isUndefined(key1) || angular.isUndefined(key2))
	        return 0;
	
	      var sum = 0;
	      angular.forEach(data, function(v, k) {
	        sum = sum + (parseInt(v[key1]) * parseInt(v[key2]));
	      });
	      return sum;
	    }
	  })
	  
	  //total number of professions represented in selectedLearned
	  .filter('totalProfessions', function() {

	    return function(data, key1) {
	    	// console.log("data is "+JSON.stringify(data));
	    	// console.log("key1 is "+key1);//profession

	      if (angular.isUndefined(data) || angular.isUndefined(key1)){
	        return 0;
	      }
	      
	  		var unique = {};
			
			var distinct = [];
			for( var i in data ){
				if( typeof(unique[data[i].name]) == "undefined"){
		    		distinct.push(data[i].name);
			     }
			     unique[data[i].name] = 0;
		    }

	
	      return distinct.length;
	    };
	  })
	  
	  //total number of professions represented in selectedLearned
	  .filter('figurePercentThreshold', function() {

	    return function(data,lsp, key1) {
	    	// console.log("data is "+JSON.stringify(data));
	    	// console.log("key1 is "+key1);//profession

	      if (angular.isUndefined(data) || angular.isUndefined(lsp) || angular.isUndefined(key1)){
	        return 0;
	      }
	      

	      return lsp/key1;
	    };
	  })
	  //for each row in the professions array, subtract the level times the cost from the total lsp.
	  .filter('totalSkillPointsRemaining', function() {
	    return function(data, lsp, key1, key2) {
	    	// console.log("inside totalSkillPointsRemaining lsp="+lsp);
	    	// console.log("inside totalSkillPointsRemaining key1"+key1);
	    	// console.log("inside totalSkillPointsRemaining key2"+key2);
	      if (angular.isUndefined(data) || angular.isUndefined(lsp)|| angular.isUndefined(key1) || angular.isUndefined(key2))
	        return 0;
	
	      var sum = lsp;
	      angular.forEach(data, function(v, k) {
	        sum = sum - (parseInt(v[key1]) * parseInt(v[key2]));
	      });
	      return sum;
	    }
	  })
	  //add up the total skill points spent on each profession and return it as a percentage of the total lsp.
	  .filter('totalSpentByProfession', function() {
	  	// console.log("hello is it me you're looking for?");
	  	//key1 is 
	    return function(data, lsp, key1, key2, key3) {
	    	// console.log("lsp is "+lsp+" and data is "+JSON.stringify(data));
	    	// console.log("key1 is "+key1);
	    	// console.log("key2 is "+key2);
	    	// console.log("key3 is "+key3);
	      if (angular.isUndefined(data) || angular.isUndefined(key1) || angular.isUndefined(key2)){
	        return 0;
	      }
	      //else{
	      //	key1=Number(key1 || 0);
	      //	key2=Number(key2 || 0);
	      //}
	
	      var sum = 0;
	      angular.forEach(data, function(v, k) {
	      	if ((v['name'])===key3){
	        	sum = sum + (parseInt(v[key1]) * parseInt(v[key2]));
	      	}
	      });
	      console.log("sum is "+sum);
	      return sum/lsp*100;
	    };
	  })
	  //add up the total skill points spent on each profession and return it as a percentage of the total lsp. Then give EC.
	  .filter('isAClass', function() {
	  	// console.log("hello is it me you're looking for?");
	  	//key1 is 
	    return function(data, lsp, key1, key2, key3) {
	    	// console.log("lsp is "+lsp+" and data is "+JSON.stringify(data));
	    	// console.log("key1 is "+key1);
	    	// console.log("key2 is "+key2);
	    	// console.log("key3 is "+key3);
	      if (angular.isUndefined(data) || angular.isUndefined(key1) || angular.isUndefined(key2)){
	        return 0;
	      }
	      //else{
	      //	key1=Number(key1 || 0);
	      //	key2=Number(key2 || 0);
	      //}
	
	      var sum = 0;
	      angular.forEach(data, function(v, k) {
	      	if ((v['name'])===key3){
	        	sum = sum + (parseInt(v[key1]) * parseInt(v[key2]));
	      	}
	      });
	      var distributedPercentage=sum/lsp*100;
	      console.log("distributedPercentage is "+distributedPercentage); 
	      if (distributedPercentage>25){
	      	return true;
	      }else{
	      	return false;
	      }
	    };
	  })
	  //attempts to go through all the skills and add the bonus for nationality.
	  .filter('filterByNationality', function() {
	    return function(skills, bonus) {
			if (angular.isUndefined(skills) || angular.isUndefined(bonus)){
				// console.log("something is undefined");
				return 0;
			}

	        for (var val = 0; val < bonus.length; val++) {
	        	
	        	var thisbonus=bonus[val];

	    		for (var x = 0; x < skills.length; x++) {

	        		if (thisbonus.skill===skills[x].skill){	    			
						skills[x].skill_cost=thisbonus.skill_cost;

	        		}
	    		}
			}
	      return skills;
	    };
	  }).controller('CharactersheetsController', ['$scope', '$stateParams', '$location', 'Authentication', 'Charactersheets',
		function($scope, $stateParams, $location, Authentication, Charactersheets) {
			var self = this;  
			// self.obj = { prop: "world" };
			self.authentication = Authentication;
			self.currentPage = 1;
			self.pageSize = 10;
			self.offset = 0;
			self.thenumber=0;
			self.ec_percentage=0;
			self.mr_table = [[-4,-4,-3,-3,-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7],[-4,-4,-3,-3,-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7],[-4,-4,-3,-3,-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7],[-4,-4,-3,-3,-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7],[-4,-4,-3,-3,-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7],[-3,-3,-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8],[-3,-3,-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8],[-3,-3,-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8],[-3,-3,-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8],[-3,-3,-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8],[-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9],[-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9],[-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9],[-2,-2,-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9],[-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10],[-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10],[-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10],[-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10],[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11],[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11],[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11],[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12],[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12],[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12]];
			self.weight_table = [[31,0,20,1.5,6,0,0],[32,1,20,1.5,6,0,0],[33,2,20,1.5,6,0,0],[34,3,20,1.5,6,0,0],[35,4,20,1.5,6,0,0],[36,5,30,1.5,6,0,0],[37,6,30,1.5,6,1,0],[38,7,30,1.5,6,1,0],[39,8,30,1.5,6,1,0],[40,9,30,1.5,6,1,0],[41,10,40,1.5,6,1,0],[42,11,40,1.5,6,1,0],[43,12,40,1.5,6,1,0],[44,13,40,1.5,6,1,0],[45,14,50,1.5,6,1,0],[46,15,50,1.5,6,1,0],[47,16,50,1.5,6,1,0],[48,17,60,1.5,6,1,0],[49,18,60,1.5,6,1,0],[50,19,60,1.5,6,1,0],[51,20,60,1.5,6,1,0],[52,21,70,1.5,6,1,0],[53,22,70,1.5,6,1,0],[54,23,70,1.5,6,1,0],[55,24,80,1.5,6,1,1.5],[56,25,80,1.5,6,1,1.5],[57,26,80,1.5,6,1,1.5],[58,27,80,1.5,6,1,1.5],[59,28,90,1.5,6,1,1.5],[60,29,90,1.5,6,1,1.5],[61,30,100,0,0,1,2],[62,31,100,0,0,1,2],[63,32,105,0,0,1,2],[64,33,105,0,0,1,2],[65,34,110,0,0,1,2],[66,35,110,0,0,1,3],[67,36,115,0,0,1,3],[68,37,115,0,0,1,3],[69,38,120,0,0,1,3],[70,39,120,0,0,1,3],[71,40,125,0,0,1,3],[72,41,125,0,0,1,3],[73,42,130,0,0,1,3],[74,43,130,0,0,1,3],[75,44,135,0,0,1,3],[76,45,135,0,0,1,4],[77,46,140,0,0,1,4],[78,47,140,0,0,1,4],[79,48,140,0,0,1,4],[80,49,140,0,0,1,4],[81,50,150,0,0,0,4],[82,51,160,0,0,0,4],[83,52,170,0,0,0,4],[84,53,180,0,0,0,4],[85,54,200,0,0,0,4],[86,55,220,0,0,0,0],[87,56,240,0,0,0,0],[88,57,260,0,0,0,0],[89,58,280,0,0,0,0],[90,59,300,0,0,0,0],[91,60,320,0,0,0,0],[92,61,340,0,0,0,0],[93,62,360,0,0,0,0],[94,63,380,0,0,0,0],[95,64,400,0,0,0,0],[96,65,420,0,0,0,0],[97,66,440,0,0,0,0],[98,67,460,0,0,0,0],[99,68,480,0,0,0,0],[100,69,500,0,0,0,0],[101,70,520,0,0,0,0],[102,71,540,0,0,0,0],[103,72,560,0,0,0,0],[104,73,580,0,0,0,0],[105,74,600,0,0,0,0],[106,75,620,0,0,0,0],[107,76,640,0,0,0,0],[108,77,660,0,0,0,0],[109,78,680,0,0,0,0],[110,79,700,0,0,0,0],[111,80,720,0,0,0,0],[112,81,740,0,0,0,0]];
			self.sc_table = [[992,930,870,812,756,702,650,600,552,506,462,420,380,342,306,272,240,210,182,156,132,110,90,72,56,42,30,20,12,6,2],[31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]];
			self.dc_table = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3],[1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5],[1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5],[1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5],[1,1,1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,7,7,7,7,8,8,8],[1,1,1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,7,7,7,7,8,8,8],[1,1,1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,7,7,7,7,8,8,8],[1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,6,7,7,8,8,8,9,9,10,10,11,11,11],[1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,6,7,7,8,8,8,9,9,10,10,11,11,11],[1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,6,7,7,8,8,8,9,9,10,10,11,11,11],[1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,14],[1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,14],[1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,14],[1,2,2,3,3,4,4,5,5,6,7,7,8,8,9,10,10,11,11,12,13,13,14,14,15,16,16,16],[1,2,2,3,3,4,4,5,5,6,7,7,8,8,9,10,10,11,11,12,13,13,14,14,15,16,16,16],[1,2,2,3,3,4,4,5,5,6,7,7,8,8,9,10,10,11,11,12,13,13,14,14,15,16,16,16],[2,3,3,4,4,5,5,6,6,7,8,8,9,10,11,11,12,13,13,14,15,15,16,17,17,18,19,19],[2,3,3,4,4,5,5,6,6,7,8,8,9,10,11,11,12,13,13,14,15,15,16,17,17,18,19,19],[2,3,3,4,4,5,5,6,6,7,8,8,9,10,11,11,12,13,13,14,15,15,16,17,17,18,19,19],[3,3,4,4,5,5,6,6,7,8,9,10,10,11,12,13,14,14,15,16,17,18,18,19,20,21,22,22],[3,3,4,4,5,5,6,6,7,8,9,10,10,11,12,13,14,14,15,16,17,18,18,19,20,21,22,22],[3,3,4,4,5,5,6,6,7,8,9,10,10,11,12,13,14,14,15,16,17,18,18,19,20,21,22,22]];
			self.ar_table = [[-5,-4,-4,-4,-3,-3,-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9],[-5,-4,-4,-4,-3,-3,-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9],[-5,-4,-4,-4,-3,-3,-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9],[-5,-4,-4,-4,-3,-3,-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9],[-4,-3,-3,-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10],[-4,-3,-3,-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10],[-4,-3,-3,-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10],[-4,-3,-3,-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10],[-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11],[-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11],[-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11],[-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11],[-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12],[-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12],[-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12],[-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12],[-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13],[-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13],[-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13],[-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13],[0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14],[0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14],[0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14],[0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14]];
			self.dr_table = [[-3,-3,-2,-2,-2,-2,-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7],[-3,-3,-2,-2,-2,-2,-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7],[-3,-3,-2,-2,-2,-2,-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7],[-2,-2,-2,-2,-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8],[-2,-2,-2,-2,-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8],[-2,-2,-2,-2,-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8],[-2,-2,-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8],[-2,-2,-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8],[-2,-2,-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8],[-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9],[-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9],[-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9],[-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9],[-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9],[-1,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9],[0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10],[0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10],[0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10],[0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10],[0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10],[0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10],[1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11],[1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11],[1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11]];
			self.hp_table = [[1,2,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10],[1,2,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10],[1,2,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10],[4,4,5,5,6,6,7,7,8,8,9,10,10,11,11,12,13,13,14,14,15,15,16,16,17,17,18,18],[4,4,5,5,6,6,7,7,8,8,9,10,10,11,11,12,13,13,14,14,15,15,16,16,17,17,18,18],[4,4,5,5,6,6,7,7,8,8,9,10,10,11,11,12,13,13,14,14,15,15,16,16,17,17,18,18],[7,8,8,9,9,10,10,12,13,14,14,15,15,16,17,18,19,20,20,21,21,22,22,23,23,24,24,25],[7,8,8,9,9,10,10,12,13,14,14,15,15,16,17,18,19,20,20,21,21,22,22,23,23,24,24,25],[7,8,8,9,9,10,10,12,13,14,14,15,15,16,17,18,19,20,20,21,21,22,22,23,23,24,24,25],[7,8,9,10,11,12,13,15,16,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,36,37,38],[7,8,9,10,11,12,13,15,16,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,36,37,38],[7,8,9,10,11,12,13,15,16,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,36,37,38],[4,6,8,10,12,14,16,18,19,21,22,24,25,27,28,31,32,33,34,36,37,38,39,40,41,42,43,44],[4,6,8,10,12,14,16,18,19,21,22,24,25,27,28,31,32,33,34,36,37,38,39,40,41,42,43,44],[4,6,8,10,12,14,16,18,19,21,22,24,25,27,28,31,32,33,34,36,37,38,39,40,41,42,43,44],[8,10,12,14,16,18,20,22,23,25,27,29,31,32,34,36,38,40,41,43,44,45,46,47,48,49,50,51],[8,10,12,14,16,18,20,22,23,25,27,29,31,32,34,36,38,40,41,43,44,45,46,47,48,49,50,51],[8,10,12,14,16,18,20,22,23,25,27,29,31,32,34,36,38,40,41,43,44,45,46,47,48,49,50,51],[11,13,15,17,19,21,23,25,27,29,31,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66],[11,13,15,17,19,21,23,25,27,29,31,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66],[11,13,15,17,19,21,23,25,27,29,31,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66],[15,17,18,19,20,23,26,29,31,34,36,38,41,43,46,48,50,53,55,57,59,61,63,65,67,69,71,73],[15,17,18,19,20,23,26,29,31,34,36,38,41,43,46,48,50,53,55,57,59,61,63,65,67,69,71,73],[15,17,18,19,20,23,26,29,31,34,36,38,41,43,46,48,50,53,55,57,59,61,63,65,67,69,71,73]];
			self.fp_table = [[10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48],[10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48],[20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58],[20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58],[30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68],[30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68],[40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78],[40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78],[50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88],[50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88],[60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98],[60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98],[70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108],[70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108],[80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118],[80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118],[90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128],[90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128],[100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138],[100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138],[110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148],[110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148],[120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158],[120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158]];
			self.hp_per_table = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2],[1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3],[1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3],[1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3],[1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4],[1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4],[1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4],[1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4],[1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4],[1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4],[1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5],[1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5],[1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5]];
			self.nsp_table = [[19,19,19,19,21,21,21,21,23,23,23,23,25,25,25,25,27,27,27,27,29,29,29,29],[19,19,19,19,21,21,21,21,23,23,23,23,25,25,25,25,27,27,27,27,29,29,29,29],[19,19,19,19,21,21,21,21,23,23,23,23,25,25,25,25,27,27,27,27,29,29,29,29],[21,21,21,21,23,23,23,23,25,25,25,25,27,27,27,27,29,29,29,29,31,31,31,31],[21,21,21,21,23,23,23,23,25,25,25,25,27,27,27,27,29,29,29,29,31,31,31,31],[21,21,21,21,23,23,23,23,25,25,25,25,27,27,27,27,29,29,29,29,31,31,31,31],[23,23,23,23,25,25,25,25,27,27,27,27,29,29,29,29,31,31,31,31,33,33,33,33],[23,23,23,23,25,25,25,25,27,27,27,27,29,29,29,29,31,31,31,31,33,33,33,33],[23,23,23,23,25,25,25,25,27,27,27,27,29,29,29,29,31,31,31,31,33,33,33,33],[25,25,25,25,27,27,27,27,29,29,29,29,31,31,31,31,33,33,33,33,35,35,35,35],[25,25,25,25,27,27,27,27,29,29,29,29,31,31,31,31,33,33,33,33,35,35,35,35],[25,25,25,25,27,27,27,27,29,29,29,29,31,31,31,31,33,33,33,33,35,35,35,35],[27,27,27,27,29,29,29,29,31,31,31,31,33,33,33,33,35,35,35,35,37,37,37,37],[27,27,27,27,29,29,29,29,31,31,31,31,33,33,33,33,35,35,35,35,37,37,37,37],[27,27,27,27,29,29,29,29,31,31,31,31,33,33,33,33,35,35,35,35,37,37,37,37],[29,29,29,29,31,31,31,31,33,33,33,33,35,35,35,35,37,37,37,37,39,39,39,39],[29,29,29,29,31,31,31,31,33,33,33,33,35,35,35,35,37,37,37,37,39,39,39,39],[29,29,29,29,31,31,31,31,33,33,33,33,35,35,35,35,37,37,37,37,39,39,39,39],[31,31,31,31,33,33,33,33,35,35,35,35,37,37,37,37,39,39,39,39,41,41,41,41],[31,31,31,31,33,33,33,33,35,35,35,35,37,37,37,37,39,39,39,39,41,41,41,41],[31,31,31,31,33,33,33,33,35,35,35,35,37,37,37,37,39,39,39,39,41,41,41,41],[33,33,33,33,35,35,35,35,37,37,37,37,39,39,39,39,41,41,41,41,43,43,43,43],[33,33,33,33,35,35,35,35,37,37,37,37,39,39,39,39,41,41,41,41,43,43,43,43],[33,33,33,33,35,35,35,35,37,37,37,37,39,39,39,39,41,41,41,41,43,43,43,43]];
			self.nsp_per_table = [[4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9],[4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9],[4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9],[5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10],[5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10],[5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10],[6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11],[6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11],[6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11],[7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12],[7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12],[7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12],[8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13],[8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13],[8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13],[9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14],[9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14],[9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14],[10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15],[10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15],[10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15],[11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16],[11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16],[11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16]];
			self.lsp_table=[[11,11,11,13,13,13,15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25],[11,11,11,13,13,13,15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25],[11,11,11,13,13,13,15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25],[11,11,11,13,13,13,15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25],[13,13,13,15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27],[13,13,13,15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27],[13,13,13,15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27],[13,13,13,15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27],[15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29],[15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29],[15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29],[15,15,15,17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29],[17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31],[17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31],[17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31],[17,17,17,19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31],[19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31,33,33,33],[19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31,33,33,33],[19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31,33,33,33],[19,19,19,21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31,33,33,33],[21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31,33,33,33,35,35,35],[21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31,33,33,33,35,35,35],[21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31,33,33,33,35,35,35],[21,21,21,23,23,23,25,25,25,27,27,27,29,29,29,31,31,31,33,33,33,35,35,35]];
			self.lsp_per_table =[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],[1,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17],[2,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17],[3,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17],[4,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17],[5,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18],[6,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18],[7,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18],[8,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18],[9,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19],[10,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19],[11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19],[12,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19],[13,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20],[14,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20],[15,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20],[16,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20],[17,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21],[18,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21],[19,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21],[20,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21],[21,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22],[22,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22],[23,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22],[24,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22]];
			self.mi_table = [[0,0,0,5,5,5,10,10,10,15,15,15,20,20,20,25,25,25,30,30,30,35,35,35],[0,0,0,5,5,5,10,10,10,15,15,15,20,20,20,25,25,25,30,30,30,35,35,35],[5,5,5,10,10,10,15,15,15,20,20,20,25,25,25,30,30,30,35,35,35,40,40,40],[5,5,5,10,10,10,15,15,15,20,20,20,25,25,25,30,30,30,35,35,35,40,40,40],[10,10,10,15,15,15,20,20,20,25,25,25,30,30,30,35,35,35,40,40,40,45,45,45],[10,10,10,15,15,15,20,20,20,25,25,25,30,30,30,35,35,35,40,40,40,45,45,45],[10,10,10,15,15,15,20,20,20,25,25,25,30,30,30,35,35,35,40,40,40,45,45,45],[15,15,15,20,20,20,25,25,25,30,30,30,35,35,35,40,40,40,45,45,45,50,50,50],[15,15,15,20,20,20,25,25,25,30,30,30,35,35,35,40,40,40,45,45,45,50,50,50],[15,15,15,20,20,20,25,25,25,30,30,30,35,35,35,40,40,40,45,45,45,50,50,50],[20,20,20,25,25,25,30,30,30,35,35,35,40,40,40,45,45,45,50,50,50,55,55,55],[20,20,20,25,25,25,30,30,30,35,35,35,40,40,40,45,45,45,50,50,50,55,55,55],[20,20,20,25,25,25,30,30,30,35,35,35,40,40,40,45,45,45,50,50,50,55,55,55],[25,25,25,30,30,30,35,35,35,40,40,40,45,45,45,50,50,50,55,55,55,60,60,60],[25,25,25,30,30,30,35,35,35,40,40,40,45,45,45,50,50,50,55,55,55,60,60,60],[25,25,25,30,30,30,35,35,35,40,40,40,45,45,45,50,50,50,55,55,55,60,60,60],[30,30,30,35,35,35,40,40,40,45,45,45,50,50,50,55,55,55,60,60,60,65,65,65],[30,30,30,35,35,35,40,40,40,45,45,45,50,50,50,55,55,55,60,60,60,65,65,65],[30,30,30,35,35,35,40,40,40,45,45,45,50,50,50,55,55,55,60,60,60,65,65,65],[35,35,35,40,40,40,45,45,45,50,50,50,55,55,55,60,60,60,65,65,65,70,70,70],[35,35,35,40,40,40,45,45,45,50,50,50,55,55,55,60,60,60,65,65,65,70,70,70],[40,40,40,45,45,45,50,50,50,55,55,55,60,60,60,65,65,65,70,70,70,75,75,75],[40,40,40,45,45,45,50,50,50,55,55,55,60,60,60,65,65,65,70,70,70,75,75,75],[45,45,45,50,50,50,55,55,55,60,60,60,65,65,65,70,70,70,75,75,75,80,80,80]];
			self.rc_table = [[0,0,0,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6],[0,0,0,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6],[1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8],[1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8],[1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8],[1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8],[2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9],[2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9],[2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9],[2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9],[2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9],[2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9],[3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10],[3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10],[3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10],[3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10],[3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10],[3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10],[4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11],[4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11],[4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11],[4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11],[4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11],[4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11]];
			self.saves = [20,19,18,17,16,15];
			self.level=1;
			

  
			// Variables - Public
			self.filter = {};
			
			self.filterByProperties=filterByProperties;
			self.getValuesFor=getValuesFor;
			//self.getEcFor=getEcFor;
			// self.getProfessionObjects=getProfessionObjects;
			
			self.professions = [
				{name:'Fighter', ec: 2,skill: 'Cudgel', skill_cost: 1, skill_group: 'Club Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Hammer', skill_cost: 3, skill_group: 'Club Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Staff', skill_cost: 7, skill_group: 'Club Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Mace', skill_cost: 2, skill_group: 'Club Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Battle Mace', skill_cost: 3, skill_group: 'Club Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Hand Axe', skill_cost: 3, skill_group: 'Axe Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Battle Axe', skill_cost: 4, skill_group: 'Axe Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Double Axe', skill_cost: 5, skill_group: 'Axe Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Halberd', skill_cost: 6, skill_group: 'Axe Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Dagger', skill_cost: 2, skill_group: 'Sword Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Short Sword', skill_cost: 3, skill_group: 'Sword Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Broadsword', skill_cost: 4, skill_group: 'Sword Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Bastard Sword', skill_cost: 5, skill_group: 'Sword Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Greatsword', skill_cost: 6, skill_group: 'Sword Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Spear', skill_cost: 5, skill_group: 'Thrust Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Morningstar', skill_cost: 5, skill_group: 'Articulated Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Flail', skill_cost: 7, skill_group: 'Articulated Weapons', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Thrown Object', skill_cost: 2, skill_group: 'Thrown', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Short Bow', skill_cost: 6, skill_group: 'Archery', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Long Bow', skill_cost: 8, skill_group: 'Archery', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Cross Bow', skill_cost: 5, skill_group: 'Archery', sheet_group: 'AR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Double Dagger', skill_cost: 8, skill_group: 'Defensive Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Rapier Dagger', skill_cost: 10, skill_group: 'Defensive Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Parry', skill_cost: 5, skill_group: 'Defensive Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Block', skill_cost: 4, skill_group: 'Defensive Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Beat', skill_cost: 6, skill_group: 'Defensive Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Buckler', skill_cost: 8, skill_group: 'Shield Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Round', skill_cost: 6, skill_group: 'Shield Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Chevron', skill_cost: 9, skill_group: 'Shield Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Legionaire', skill_cost: 12, skill_group: 'Shield Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Fighter', ec: 2,skill: 'Shield Bash', skill_cost: 6, skill_group: 'Shield Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Berserker', ec: 3,skill: 'Beserkergang',  skill_cost: 6, skill_group: 'Berserker', sheet_group: 'Berserker Skills', level: 0},
				{name:'Berserker', ec: 3,skill: 'Induce/terminate',  skill_cost: 8, skill_group: 'Berserker', sheet_group: 'Berserker Skills', level: 0},
				{name:'Berserker', ec: 3,skill: 'Control',  skill_cost: 7, skill_group: 'Berserker', sheet_group: 'Berserker Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Punch', skill_cost: 1, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Chop', skill_cost: 7, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Kick', skill_cost: 9, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Head Butt', skill_cost: 6, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Double Chop', skill_cost: 8, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Flying Kick', skill_cost: 11, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Hand & Foot', skill_cost: 5, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Multi Hand', skill_cost: 6, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Grapple', skill_cost: 4, skill_group:'Grapple Skills', sheet_group: 'AR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Throw', skill_cost: 6, skill_group:'Grapple Skills', sheet_group: 'AR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Dodging', skill_cost: 6, skill_group:'Defensive Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Hand Parry', skill_cost: 10, skill_group:'Defensive Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Martial Artist', ec: 1, skill: 'Foot Foot', skill_cost: 15, skill_group:'Defensive Skills', sheet_group: 'DR Skills', level: 0},
				{name:'Assassin', ec: 2, skill: 'BackStrike',skill_cost: 9, skill_group:'Attack Skills', sheet_group: 'Assassin Skills', level: 0},
				{name:'Assassin', ec: 2, skill: 'Garotte',skill_cost: 11, skill_group:'Attack Skills', sheet_group: 'Assassin Skills', level: 0},
				{name:'Assassin', ec: 2, skill: 'Vital Strike',skill_cost: 8, skill_group:'Attack Skills', sheet_group: 'Assassin Skills', level: 0},
				{name:'Assassin', ec: 2, skill: 'Set Traps',skill_cost: 4, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
				{name:'Assassin', ec: 2, skill: 'Poisoning',skill_cost: 9, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
				{name:'Assassin', ec: 2, skill: 'Ambush',skill_cost: 6, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
				{name:'Assassin', ec: 2, skill: 'Inffltrate',skill_cost: 8, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
				{name:'Assassin', ec: 2, skill: 'Trailing',skill_cost: 5, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Pick Pocket',skill_cost: 8, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Cut Purse',skill_cost: 5, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Search Person',skill_cost: 4, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Palming',skill_cost: 7, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Search Area',skill_cost: 3, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Search Object',skill_cost: 4, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Conceal Item',skill_cost: 5, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Pick Lock',skill_cost: 7, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Open Silently',skill_cost: 2, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Casing',skill_cost: 3, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Forgery',skill_cost: 8, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Disguise',skill_cost: 7, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Bribery',skill_cost: 4, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Research',skill_cost: 5, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Conning',skill_cost: 6, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Intimidation',skill_cost: 8, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Dicing',skill_cost: 6, skill_group:'Gambling', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Card playing',skill_cost: 5, skill_group:'Gambling', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Boardgaming',skill_cost: 4, skill_group:'Gambling', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Wagering',skill_cost: 5, skill_group:'Gambling', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Cheating',skill_cost: 9, skill_group:'Gambling', sheet_group: 'Formula Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Silent Movement',skill_cost: 5, skill_group:'Movement', sheet_group: 'AR Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Concealment',skill_cost: 4, skill_group:'Movement', sheet_group: 'AR Skills', level: 0},
				{name:'Thief', ec: 1, skill: 'Climbing',skill_cost: 4, skill_group:'Movement', sheet_group: 'AR Skills', level: 0},
				{name:'Mage', ec:0, skill: 'Research',skill_cost:15, skill_group:'Clerical', level:0},
				{name:'Mage', ec:0, skill: 'Preparation',skill_cost:12, skill_group:'Clerical', level:0},
				{name:'Mage', ec:0, skill: 'Lost Scripts',skill_cost:16, skill_group:'Clerical', level:0},
				{name:'Mage', ec:0, skill: 'Hand',skill_cost:3, skill_group:'Targeting', level:0},
				{name:'Mage', ec:0, skill: 'Eye',skill_cost:2, skill_group:'Targeting', level:0},
				{name:'Mage', ec:0, skill: 'Two Hands',skill_cost:4, skill_group:'Targeting', level:0},
				{name:'Mage', ec:0, skill: 'General',skill_cost:5, skill_group:'Targeting', level:0},
				{name:'Mage', ec:0, skill: 'Wand',skill_cost:6, skill_group:'Targeting', level:0},
				{name:'Mage', ec:0, skill: 'Staff',skill_cost:7, skill_group:'Targeting', level:0},
				{name:'Mage', ec:0, skill: 'Shield',skill_cost:7, skill_group:'Mana manipulation', level:0},
				{name:'Mage', ec:0, skill: 'Blast',skill_cost:9, skill_group:'Mana manipulation', level:0},
				{name:'Mage', ec:0, skill: 'Leech',skill_cost:11, skill_group:'Mana manipulation', level:0},
				{name:'Mage', ec:0, skill: 'Cause Fire',skill_cost:1, skill_group:'Basic spells', level:0},
				{name:'Mage', ec:0, skill: 'Circle of Protection',skill_cost:5, skill_group:'Basic spells', level:0},
				{name:'Mage', ec:0, skill: 'Detect Magic',skill_cost:1, skill_group:'Basic spells', level:0},
				{name:'Mage', ec:0, skill: 'False Light',skill_cost:1, skill_group:'Basic spells', level:0},
				{name:'Mage', ec:0, skill: 'Farsee',skill_cost:2, skill_group:'Basic spells', level:0},
				{name:'Mage', ec:0, skill: 'Negate Magic',skill_cost:2, skill_group:'Basic spells', level:0},
				{name:'Mage', ec:0, skill: 'Sleep',skill_cost:3, skill_group:'Basic spells', level:0}

			];
			//http://plnkr.co/edit/A2IIHzw5qwOW7WRGmm8R?p=preview

			//Functions - Public
			self.filterByProfession = filterByProfession;
			self.getProfessions = getProfessions;
			self.getNativeSkillGroups = getNativeSkillGroups;
			self.getNativeSkills = getNativeSkills;
			self.getEC = getEC;
			
			// Functions - Definitions
			function filterByProfession(profession) {
				return self.filter[profession.name] || noFilter(self.filter);
			}
			
			function getProfessions() {
				// console.log("getProfessions");
				return (self.professions || []).
				  map(function (profession) { return profession.name; }).
				  filter(function (cat, idx, arr) { return arr.indexOf(cat) === idx; });
			}
			
			function getTotalByProfession(prop) {
				// console.log("getTotalByProfession");
				return (self.professions || []).
				  map(function (profession) { return profession.name; }).
				  filter(function (cat, idx, arr) { return arr.indexOf(cat) === idx; });
			}
			// self.array.filter(function(obj){ return (obj.name=="a"); })[0].value;//ABC
			function getEC(prop) {
				// console.log("getTotalByProfession");
				// console.log("typeof is "+typeof(prop));
				// console.log ("prop is "+prop);
				return (self.professions || []).
				  filter(function (profession) { return (profession.name==prop); })[0].ec;
			}
			
			// function getEC(prop) {
			// 	// console.log("getTotalByProfession");
			// 	console.log("typeof is "+typeof(prop));
			// 	console.log ("prop is "+prop);
			// 	return (self.professions || []).
			// 	  filter(function (profession) { return (profession.name==prop); })[0].ec;
			// }

			function addEc(amt,e) { 
				// console.log(e);
				// console.log("adding ec");
				var total = Number(self.totalEc || 0);  
		        if(e.target.checked){
		            total = total + amt;
		        } else {
		            total = total - amt;
		        }
		        self.totalEc = total;
		        // console.log(self.totalEc);
		    }
			  //function getCategories() {
			  //  return (self.wines || []).
			  //    map(function (wine) { return wine.category; }).
			  //    filter(function (cat, idx, arr) { return arr.indexOf(cat) === idx; });
			  //}
  
			// function getClasses(){
			// 	var array = self.professions;
			// 	var unique = {};
			// 	var distinct = [];
			// 	for( var i in array ){
			// 		if( typeof(unique[array[i].name]) == "undefined"){
			// 			distinct.push(array[i].name);
			// 		}
			// 		unique[array[i].name] = 0;
			//     }
			//     return distinct;
			// }
			
			// function getSkillsByProfession(prop) {
			// 	return (self.professions || []).
			// 	  map(function (profession) { return profession.level*profession.cost; }).
			// 	  filter(function (cat, idx, arr) { return arr.indexOf(cat) === idx; });
			// }
			
			/* extra stuff */
			// Functions - Definitions
			// function filterByProperties(profession) {
			// 	return self.filter[profession.skills] || noFilter(self.filter);
			// }
			
			function filterByProperties(profession) {
			  var activeFilterProps = Object.
			    keys(self.filter).
			    filter(function (prop) { return !noFilter(self.filter[prop]); });
					    // Use this snippet for matching with AND
			  return activeFilterProps.
			    every(function (prop) { return self.filter[prop][profession[prop]]; });
			  // Use this snippet for matching with OR
			  //return !activeFilterProps.length || activeFilterProps.
			  //  some(function (prop) { return self.filter[prop][wine[prop]]; });
			}
			  
			function getValuesFor(prop) {
				// console.log("prop is "+prop);
			    return (self.professions || []).
			      map(function (profession) { return profession[prop]; }).
			      filter(function (value, idx, arr) { return arr.indexOf(value) === idx; });
			}
			


			
		    function alterByNationality (skills, bonus) {
				if (angular.isUndefined(skills) || angular.isUndefined(bonus)){
					// console.log("something is undefined");
					return 0;
				}

		        for (var val = 0; val < bonus.length; val++) {
		        	
		        	var thisbonus=bonus[val];

		    		for (var x = 0; x < skills.length; x++) {
	
		        		if (thisbonus.skill===skills[x].skill){	    			
							skills[x].skill_cost=thisbonus.skill_cost;
		        		}
		    		}
				}
		      return skills;
		    }
	  
			// function getUniqueValues(prop) {
			// 	return (self.professions|| []).
			// 	  map(function (profession) { return profession[prop]; }).
			// 	  filter(function (value, idx, arr) { return arr.indexOf(value) === idx; });
			// }
			

			
			// function getProfessionObjects() {
			//   //console.log("getProfessionObjects");
			
			// return (self.professions || []).
			// 	filter(function (value, idx, arr) { 
			// 	  	return value.name && value.ec; 
			// 	});
			// }
			/* end extra stuff */
			
			function noFilter(filterObj) {
				return Object.
				  keys(filterObj).
				  every(function (key) { return !filterObj[key]; });
			}
			
													
			self.getSkillGroups = function(name) {
				// console.log("getlearnedskillgroups");
				// console.log("name = "+name);
				
				// var result= (self.professions || []).
			 //     map(function (profession) { return profession['skill_group']; }).
			 //     filter(function (value, idx, arr) { return arr.indexOf(value) === idx; });
				
				// console.log("skill groups result ="+JSON.stringify(result));
				// 
				var result = (self.selectedLearned || [])
				.filter(function (profession) {
					// console.log("profession.name is "+profession.name);
					// console.log("and the rest is "+JSON.stringify(profession));
			    	return profession.name === name;
				});
				
				return (result || []).
			      map(function (profession) { return profession['skill_group']; }).
			      filter(function (value, idx, arr) { return arr.indexOf(value) === idx; });

			};
			// self.getSkillGroups = function(name) {
			// 	console.log("getSkillGroups");
			// 	console.log("name = "+name);
				
			// 	// var result= (self.professions || []).
			//  //     map(function (profession) { return profession['skill_group']; }).
			//  //     filter(function (value, idx, arr) { return arr.indexOf(value) === idx; });
				
			// 	// console.log("skill groups result ="+JSON.stringify(result));
			// 	// 
			// 	return (self.selectedLearned || []).
			// 	  map(function (profession) { return profession.skill_group; }).
			// 	  filter(function (cat, idx, arr) { return arr.indexOf(cat) === idx; });
				
				
			// 	// return (result || []).
			//  //     map(function (profession) { return profession['skill_group']; }).
			//  //     filter(function (value, idx, arr) { return arr.indexOf(value) === idx; });

			// };
			   
			self.getSelectedProfessions = function(selectedLearned) {

				// console.log("getProfessions");
				return (selectedLearned || []).
				  map(function (profession) { return profession.name; }).
				  filter(function (cat, idx, arr) { return arr.indexOf(cat) === idx; });
			
			};
			
	      self.moveItem = function(item, from, to) {
	
	        // console.log('Move item   Item: '+JSON.stringify(item)+' From:: '+JSON.stringify(from)+' To:: '+JSON.stringify(to));
	        //Here from is returned as blank and to as undefined
	
	        var idx=from.indexOf(item);
	        if (idx != -1) {
	            from.splice(idx, 1);
	            to.push(item);      
	        }
	    };
    		self.selectedLearned=[];
			self.selectedNative=[];
			self.native_skills=[
				{skill:"Thyatian Common",skill_cost:6, skill_group: "languages", level: 0},
				{skill:"Traladaran",skill_cost:5, skill_group:"languages", level: 0},
				{skill:"Alphatian",skill_cost:7, skill_group:"languages", level: 0},
				{skill:"Glantrian",skill_cost:5, skill_group:"languages", level: 0},
				{skill:"Alfheimish",skill_cost:10, skill_group:"languages", level: 0},
				{skill:"Lalor (Hin Yiddish)",skill_cost:8, skill_group:"languages", level: 0},
				{skill:"Ylari",skill_cost:5, skill_group:"languages", level: 0},
				{skill:"Sind",skill_cost:6, skill_group:"languages", level: 0},
				{skill:"Northern Reaches",skill_cost:5, skill_group:"languages", level: 0},
				{skill:"Ethengarian",skill_cost:5, skill_group:"languages", level: 0},
				{skill:"Darokin",skill_cost:3, skill_group:"languages", level: 0},
				{skill:"Rockhome",skill_cost:9, skill_group:"languages", level: 0},
				{skill:"Orc",skill_cost:5, skill_group:"languages", level: 0},
				{skill:"Goblin",skill_cost:4, skill_group:"languages", level: 0},
				{skill:"Hobgoblin",skill_cost:5, skill_group:"languages", level: 0},
				{skill:"Gnoll",skill_cost:6, skill_group:"languages", level: 0},
				{skill:"Dragon",skill_cost:12, skill_group:"languages", level: 0},
				{skill:"Accounting",skill_cost:7, skill_group:"engineering", level: 0},
				{skill:"Planting",skill_cost:2, skill_group:"husbandry", level: 0},
				{skill:"Tending",skill_cost:2, skill_group:"husbandry", level: 0},
				{skill:"Harvesting",skill_cost:1, skill_group:"husbandry", level: 0},
				{skill:"Animal Tending",skill_cost:2, skill_group:"husbandry", level: 0},
				{skill:"Baking",skill_cost:3, skill_group:"services", level: 0},
				{skill:"Bar Tending",skill_cost:2, skill_group:"services", level: 0},
				{skill:"Bookbinding",skill_cost:3, skill_group:"services", level: 0},
				{skill:"Bowyery",skill_cost:5, skill_group:"craftsman", level: 0},
				{skill:"Brewing",skill_cost:6, skill_group:"craftsman", level: 0},
				{skill:"Bricklaying",skill_cost:2, skill_group:"labor", level: 0},
				{skill:"Brickmaking",skill_cost:3, skill_group:"labor", level: 0},
				{skill:"Butchering",skill_cost:4, skill_group:"services", level: 0},
				{skill:"Woodworking",skill_cost:12, skill_group:"carpentry", level: 0},
				{skill:"Furniture",skill_cost:12, skill_group:"carpentry", level: 0},
				{skill:"Joining",skill_cost:12, skill_group:"carpentry", level: 0},
				{skill:"Cartwright",skill_cost:4, skill_group:"carpentry", level: 0},
				{skill:"Cooking",skill_cost:3, skill_group:"craftsman", level: 0},
				{skill:"Coopery",skill_cost:3, skill_group:"craftsman", level: 0},
				{skill:"Curriery",skill_cost:2, skill_group:"craftsman", level: 0},
				{skill:"Dying",skill_cost:4, skill_group:"craftsman", level: 0},
				{skill:"Embalming",skill_cost:5, skill_group:"craftsman", level: 0},
				{skill:"Embroidery",skill_cost:5, skill_group:"craftsman", level: 0},
				{skill:"Etching",skill_cost:7, skill_group:"craftsman", level: 0},
				{skill:"Falconry",skill_cost:5, skill_group:"outdoors", level: 0},
				{skill:"Net",skill_cost:2, skill_group:"fishing", level: 0},
				{skill:"Line",skill_cost:3, skill_group:"fishing", level: 0},
				{skill:"Trap",skill_cost:4, skill_group:"fishing", level: 0},
				{skill:"Whaling",skill_cost:5, skill_group:"fishing", level: 0},
				{skill:"Find fish",skill_cost:3, skill_group:"fishing", level: 0},
				{skill:"Weave nets",skill_cost:3, skill_group:"fishing", level: 0},
				{skill:"Fletching",skill_cost:4, skill_group:"fishing", level: 0},
				{skill:"Glassmaking",skill_cost:6, skill_group:"craftsman", level: 0},
				{skill:"Green Grocering",skill_cost:1, skill_group:"services", level: 0},
				{skill:"Hiltyer",skill_cost:3, skill_group:"craftsman", level: 0},
				{skill:"Innkeeping",skill_cost:4, skill_group:"services", level: 0},
				{skill:"Jewel Smithing",skill_cost:6, skill_group:"craftsman", level: 0},
				{skill:"Juggling",skill_cost:8, skill_group:"art", level: 0},
				{skill:"Leather Smithing",skill_cost:4, skill_group:"craftsman", level: 0},
				{skill:"Masonry",skill_cost:6, skill_group:"craftsman", level: 0},
				{skill:"Haggling",skill_cost:4, skill_group:"art", level: 0},
				{skill:"Mime",skill_cost:7, skill_group:"art", level: 0},
				{skill:"Mining",skill_cost:5, skill_group:"labor", level: 0},
				{skill:"Milling",skill_cost:4, skill_group:"craftsman", level: 0},
				{skill:"Mountaineering",skill_cost:5, skill_group:"outdoors", level: 0},
				{skill:"Painting",skill_cost:9, skill_group:"art", level: 0},
				{skill:"Papermaking",skill_cost:5, skill_group:"craftsman", level: 0},
				{skill:"Pelting",skill_cost:3, skill_group:"craftsman", level: 0},
				{skill:"Pitch Chandlery",skill_cost:2, skill_group:"", level: 0},
				{skill:"Acting",skill_cost:7, skill_group:"art", level: 0},
				{skill:"Pottery",skill_cost:5, skill_group:"craftsman", level: 0},
				{skill:"Public Speaking",skill_cost:5, skill_group:"art", level: 0},
				{skill:"Saddlery",skill_cost:4, skill_group:"craftsman", level: 0},
				{skill:"Salt Packing",skill_cost:2, skill_group:"labor", level: 0},
				{skill:"Writing",skill_cost:10, skill_group:"scribe", level: 0},
				{skill:"Calligraphy",skill_cost:5, skill_group:"scribe", level: 0},
				{skill:"Illustration",skill_cost:7, skill_group:"scribe", level: 0},
				{skill:"Cartography",skill_cost:4, skill_group:"scribe", level: 0},
				{skill:"Sculpting",skill_cost:9, skill_group:"", level: 0},
				{skill:"Navigation",skill_cost:8, skill_group:"sea going", level: 0},
				{skill:"Helm",skill_cost:5, skill_group:"sea going", level: 0},
				{skill:"Combat",skill_cost:6, skill_group:"sea going", level: 0},
				{skill:"Rowing",skill_cost:1, skill_group:"sea going", level: 0},
				{skill:"Ship Wrighting",skill_cost:5, skill_group:"craftsman",level:0},
				{skill:"Soap Chandlery",skill_cost:2, skill_group:"craftsman", level: 0},
				{skill:"Wax Chandlery",skill_cost:2, skill_group:"craftsman", level: 0},
				{skill:"Incense",skill_cost:3, skill_group:"craftsman", level: 0},
				{skill:"Perfume",skill_cost:4, skill_group:"craftsman", level: 0},
				{skill:"Story telling",skill_cost:4, skill_group:"", level: 0},
				{skill:"Brass smithing",skill_cost:4, skill_group:"smith", level: 0},
				{skill:"Foundry",skill_cost:5, skill_group:"smith", level: 0},
				{skill:"Farriery",skill_cost:3, skill_group:"smith", level: 0},
				{skill:"Armorer",skill_cost:7, skill_group:"smith", level: 0},
				{skill:"Bladesmithing",skill_cost:7, skill_group:"smith", level: 0},
				{skill:"Goldsmith",skill_cost:7, skill_group:"smith", level: 0},
				{skill:"Blacksmithing",skill_cost:5, skill_group:"smith", level: 0},
				{skill:"Stone cutting",skill_cost:4, skill_group:"craftsman", level: 0},
				{skill:"Military Tactics",skill_cost:9, skill_group:"art", level: 0},
				{skill:"Pipe making",skill_cost:3, skill_group:"craftsman", level: 0},
				{skill:"Rope making",skill_cost:2, skill_group:"craftsman", level: 0},
				{skill:"Singing",skill_cost:7, skill_group:"art", level: 0},
				{skill:"Tailor",skill_cost:5, skill_group:"craftsman", level: 0},
				{skill:"Tanning",skill_cost:3, skill_group:"craftsman", level: 0},
				{skill:"Tarriery",skill_cost:2, skill_group:"craftsman", level: 0},
				{skill:"Thatchery",skill_cost:2, skill_group:"labor", level: 0},
				{skill:"Gymnastics",skill_cost:7, skill_group:"art", level: 0},
				{skill:"Vintning",skill_cost:6, skill_group:"craftsman", level: 0},
				{skill:"Military tactics",skill_cost:6, skill_group:"craftsman", level: 0},
				{skill:"Weaving",skill_cost:5, skill_group:"craftsman", level: 0},
				{skill:"Hunting",skill_cost:7, skill_group:"woodland", level: 0},
				{skill:"Tracking",skill_cost:5, skill_group:"woodland", level: 0},
				{skill:"Trapping",skill_cost:9, skill_group:"woodland", level: 0},
				{skill:"Signaling",skill_cost:3, skill_group:"nomadic", level: 0},
				{skill:"Groveling",skill_cost:2, skill_group:"nomadic", level: 0},
				{skill:"Bivouacking",skill_cost:6, skill_group:"woodland", level: 0},
				{skill:"Wood Carving",skill_cost:7, skill_group:"art", level: 0},
				{skill:"Woodmilling",skill_cost:3, skill_group:"craftsman", level: 0}
			];
			
			// function getClassTitle(selectedLearned){
				
			// 	for (var val = 0; val < selectedLearned.length; val++) {
		        	
		 //       	var thisSkill=selectedLearned[val];
			// 		if (thisSkill.name===""){
			// 			// for (i = 0; i < taxes.length; i++) {  //loop through the array
			// 			//     total += taxes[i].amount;  //Do the math!
			// 			// }
			// 		}

			// 	}
				
				
				
			// }
			
			// function getValuesFor(prop) {
			// 	// console.log("prop is "+prop);
			//     return (self.professions || []).
			//       map(function (profession) { return profession[prop]; }).
			//       filter(function (value, idx, arr) { return arr.indexOf(value) === idx; });
			// }
			

			
			function getNativeSkills (skillgroup) {
				// console.log("getnativeskills");

				// var result = (self.professions || [])
				// .filter(function (profession) {
			 //   	return profession.skill_group === skillgroup;
				// });
				var result = (self.native_skills || [])
				.filter(function (native_skill) {
			    	return native_skill.skill_group === skillgroup;
				});
				// var alteredResult = alterByNationality(result,self.chosen_bonus);
				
				return result;
			};
			
			function getNativeSkillGroups(skillgroup) {
				// console.log("getnative skill groups");
				var skill_array = self.native_skills;
				var result= ( skill_array|| []).
			      map(function (native_skill) { return native_skill['skill_group']; }).
			      filter(function (value, idx, arr) { return arr.indexOf(value) === idx; });
			      
			      
				// var result = (self.native_skills || [])
				// .filter(function (native_skill) {
			 //   	return native_skill.skill_group === skillgroup;
				// });
				// var alteredResult = alterByNationality(result,self.chosen_bonus);
				
				return result;
			};
			
			function alterByNationality (skills, bonus) {
				// console.log("alterByNationality");
				if (angular.isUndefined(skills) || angular.isUndefined(bonus)){
					// console.log("something is undefined");
					return 0;
				}

		        for (var val = 0; val < bonus.length; val++) {
		        	
		        	var thisbonus=bonus[val];

		    		for (var x = 0; x < skills.length; x++) {
	
		        		if (thisbonus.skill===skills[x].skill){	    			
							skills[x].skill_cost=thisbonus.skill_cost;
		        		}
		    		}
				}
		      return skills;
		    }
			
	    	self.getNationBonus = function(value)
	    	{
	    		var nation_bonus = [];
	    		if (value=="karameikos"){
		    		nation_bonus = [
						{skill:"Farriery",skill_cost:2, skill_group:"smith", level: 0},
						{name:'Fighter', ec: 2,skill: 'Battle Mace', skill_cost: 2, skill_group: 'Club Weapons', sheet_group: 'AR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Halberd', skill_cost: 5, skill_group: 'Axe Weapons', sheet_group: 'AR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Broadsword', skill_cost: 3, skill_group: 'Sword Weapons', sheet_group: 'AR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Bastard Sword', skill_cost: 4, skill_group: 'Sword Weapons', sheet_group: 'AR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Thrown Object', skill_cost: 1, skill_group: 'Thrown', level: 0},
						{name:'Fighter', ec: 2,skill: 'Double Dagger', skill_cost: 7, skill_group: 'Defensive Skills', sheet_group: 'DR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Block', skill_cost: 3, skill_group: 'Defensive Skills', sheet_group: 'DR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Beat', skill_cost: 5, skill_group: 'Defensive Skills', sheet_group: 'DR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Chevron', skill_cost: 8, skill_group: 'Shield Skills', sheet_group: 'DR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Shield Bash', skill_cost: 5, skill_group: 'Shield Skills', sheet_group: 'DR Skills', level: 0}
					];
	    		} else if (value=="Empire of Thyatis"){
	    			nation_bonus = [
						{skill:"Navigation",skill_cost:6, skill_group:"sea going", level: 0},
						{skill:"Combat",skill_cost:5, skill_group:"", "sea going": 0},
						{name:'Assassin', ec: 2, skill: 'Ambush',skill_cost: 6, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
						{name:'Assassin', ec: 2, skill: 'Infiltrate',skill_cost: 7, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
						{name:'Assassin', ec: 2, skill: 'Trailing',skill_cost: 5, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Short Sword', skill_cost: 2, skill_group: 'Sword Weapons', sheet_group: 'AR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Spear', skill_cost: 4, skill_group: 'Thrust Weapons', sheet_group: 'AR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Legionaire', skill_cost: 11, skill_group: 'Shield Skills', sheet_group: 'DR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Flail', skill_cost: 6, skill_group: 'Articulated Weapons', sheet_group: 'AR Skills', level: 0}
					];
	    		} else if (value=="Northern Reaches"){
	    			nation_bonus = [
						{skill:"Navigation",skill_cost:7, skill_group:"sea going", level: 0},
						{skill:"Helm",skill_cost:4, skill_group:"", "sea going": 0},
						{skill:"Combat",skill_cost:5, skill_group:"", "sea going": 0},
						{name:'Berserker', ec: 3,skill: 'Beserkergang',  skill_cost: 5, skill_group: 'Berserker', sheet_group: 'Berserker Skills', level: 0},
						{name:'Berserker', ec: 3,skill: 'Induce/terminate',  skill_cost: 7, skill_group: 'Berserker', sheet_group: 'Berserker Skills', level: 0},
						{name:'Berserker', ec: 3,skill: 'Control',  skill_cost: 6, skill_group: 'Berserker', sheet_group: 'Berserker Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Battle Axe', skill_cost: 3, skill_group: 'Axe Weapons', sheet_group: 'AR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Round', skill_cost: 5, skill_group: 'Shield Skills', sheet_group: 'DR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Greatsword', skill_cost: 5, skill_group: 'Sword Weapons', sheet_group: 'AR Skills', level: 0}
					];
	    		} else if (value=="Republic of Darokin"){
	    			nation_bonus = [
						{skill:"Haggling",skill_cost:3, skill_group:"", level: 0},
						{name:'Thief', ec: 1, skill: 'Pick Pocket',skill_cost: 7, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Cut Purse',skill_cost: 4, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Search Person',skill_cost: 3, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Palming',skill_cost: 6, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Search Area',skill_cost: 2, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Search Object',skill_cost: 3, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Conceal Item',skill_cost: 4, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Pick Lock',skill_cost: 6, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Open Silently',skill_cost: 2, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Casing',skill_cost: 2, skill_group:'Burglar', sheet_group: 'Formula Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Rapier Dagger', skill_cost: 9, skill_group: 'Defensive Skills', sheet_group: 'DR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Parry', skill_cost: 4, skill_group: 'Defensive Skills', sheet_group: 'DR Skills', level: 0}
					];
	    		}else if (value=="Minrothad Guilds"){
	    			nation_bonus = [
						{skill:"Haggling",skill_cost:2, skill_group:"", level: 0},
						{skill:"Brewing",skill_cost:5, skill_group:"", level: 0},
						{skill:"Pipe making",skill_cost:2, skill_group:"", level: 0},
						{skill:"Sculpting",skill_cost:8, skill_group:"", level: 0},
						{skill:"Navigation",skill_cost:7, skill_group:"sea going", level: 0},
						{skill:"Helm",skill_cost:4, skill_group:"", "sea going": 0},
						{skill:"Combat",skill_cost:5, skill_group:"", "sea going": 0},
						{skill:"Ship Wrighting",skill_cost:4, skill_group:"", "": 0},
						{skill:"Soap Chandlery",skill_cost:1, skill_group:"", level: 0},
						{skill:"Weaving",skill_cost:4, skill_group:"woodland", level: 0},
						{name:'Assassin', ec: 2, skill: 'Poisoning',skill_cost: 8, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
						{name:'Assassin', ec: 2, skill: 'Set Traps',skill_cost: 3, skill_group:'Manual Skills', sheet_group: 'Formula Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Buckler', skill_cost: 7, skill_group: 'Shield Skills', sheet_group: 'DR Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Forgery',skill_cost: 7, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Bribery',skill_cost: 3, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Research',skill_cost: 4, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Conning',skill_cost: 5, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Intimidation',skill_cost: 7, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Silent Movement',skill_cost: 4, skill_group:'Movement', sheet_group: 'AR Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Concealment',skill_cost: 3, skill_group:'Movement', sheet_group: 'AR Skills', level: 0}
					];
	    		}else if (value=="Principalities of Glantri"){
	    			nation_bonus = [
						{skill:"Spinning",skill_cost:5, skill_group:"woodland", level: 0},
						{name:'Assassin', ec: 2, skill: 'BackStrike',skill_cost: 8, skill_group:'Attack Skills', sheet_group: 'Assassin Skills', level: 0},
						{name:'Assassin', ec: 2, skill: 'Garotte',skill_cost: 10, skill_group:'Attack Skills', sheet_group: 'Assassin Skills', level: 0},
						{name:'Assassin', ec: 2, skill: 'Vital Strike',skill_cost: 7, skill_group:'Attack Skills', sheet_group: 'Assassin Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Punch', skill_cost: 1, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Chop', skill_cost: 6, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Head Butt', skill_cost: 5, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Double Chop', skill_cost: 7, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Hand & Foot', skill_cost: 4, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Multi Hand', skill_cost: 5, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Dodging', skill_cost: 6, skill_group:'Defensive Skills', sheet_group: 'DR Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Hand Parry', skill_cost: 9, skill_group:'Defensive Skills', sheet_group: 'DR Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Foot Foot', skill_cost: 14, skill_group:'Defensive Skills', sheet_group: 'DR Skills', level: 0}
					];
	    		}else if (value=="Emirates of Ylaruam"){
	    			nation_bonus = [
						{skill:"Soap chandlery",skill_cost:1, skill_group:"", level: 0},
						{skill:"Wax chandlery",skill_cost:1, skill_group:"", level: 0},
						{skill:"Glassmaking",skill_cost:5, skill_group:"", level: 0},
						{skill:"Incense",skill_cost:2, skill_group:"", level: 0},
						{skill:"Perfume",skill_cost:3, skill_group:"", level: 0},
						{skill:"Story telling",skill_cost:3, skill_group:"", level: 0},
						{skill:"Brass smithing",skill_cost:3, skill_group:"smith", level: 0}
					];
	    		}else if (value=="Alfheim"){
		    		nation_bonus = [
		    			{skill:"Orc",skill_cost:4, skill_group:"languages", level: 0},
						{skill:"Goblin",skill_cost:3, skill_group:"languages", level: 0},
						{skill:"Hobgoblin",skill_cost:4, skill_group:"languages", level: 0},
						{skill:"Gnoll",skill_cost:5, skill_group:"languages", level: 0},
						{skill:"Hunting",skill_cost:6, skill_group:"woodland", level: 0},
						{skill:"Tracking",skill_cost:4, skill_group:"woodland", level: 0},
						{skill:"Trapping",skill_cost:8, skill_group:"woodland", level: 0},
						{skill:"Singing",skill_cost:6, skill_group:"", level: 0},
						{skill:"Bowyery",skill_cost:4, skill_group:"", level: 0},
						{skill:"Fletching",skill_cost:3, skill_group:"", level: 0},
						{skill:"Military tactics",skill_cost:5, skill_group:"", level: 0},
						{name:'Fighter', ec: 2,skill: 'Long Bow', skill_cost: 5, skill_group: 'Archery', level: 0}
					];
	    		}else if (value=="Ethengar Khanate"){
		    		nation_bonus = [
						{skill:"Tracking",skill_cost:4, skill_group:"woodland", level: 0},
						{skill:"Signaling",skill_cost:2, skill_group:"nomadic", level: 0},
						{skill:"Groveling",skill_cost:1, skill_group:"nomadic", level: 0},
						{name:'Thief', ec: 1, skill: 'Disguise',skill_cost: 6, skill_group:'Deception', sheet_group: 'Formula Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Short Bow', skill_cost: 5, skill_group: 'Archery', level: 0}
					];
	    		}else if (value=="Five Shires"){
	    			nation_bonus = [
						{skill:"Story telling",skill_cost:3, skill_group:"", level: 0},
						{skill:"Singing",skill_cost:6, skill_group:"", level: 0},
						{skill:"Signaling",skill_cost:2, skill_group:"nomadic", level: 0},
						{skill:"Navigation",skill_cost:7, skill_group:"sea going", level: 0},
						{skill:"Planting",skill_cost:1, skill_group:"husbandry", level: 0},
						{skill:"Tending",skill_cost:1, skill_group:"husbandry", level: 0},
						{skill:"Animal Tending",skill_cost:1, skill_group:"husbandry", level: 0},
						{name:'Fighter', ec: 2,skill: 'Short Bow', skill_cost: 4, skill_group: 'Archery', level: 0},
						{name:'Fighter', ec: 2,skill: 'Short Sword', skill_cost: 2, skill_group: 'Sword Weapons', sheet_group: 'AR Skills', level: 0}
					];
	    		}else if (value=="Atruaghin Clans"){
					nation_bonus = [
						{skill:"Hunting",skill_cost:6, skill_group:"woodland", level: 0},
						{skill:"Tracking",skill_cost:4, skill_group:"woodland", level: 0},
						{skill:"Weaving",skill_cost:4, skill_group:"", level: 0},
						{skill:"Pottery",skill_cost:4, skill_group:"", level: 0},
						{skill:"Whaling",skill_cost:4, skill_group:"", level: 0},
						{name:'Thief', ec: 1, skill: 'Climbing',skill_cost: 3, skill_group:'Movement', sheet_group: 'AR Skills', level: 0}
					];
	    		}else if (value=="Kingdom of Ierendi"){
	    			nation_bonus = [
						{skill:"Navigation",skill_cost:7, skill_group:"sea going", level: 0},
						{skill:"Helm",skill_cost:4, skill_group:"", "sea going": 0},
						{skill:"Combat",skill_cost:4, skill_group:"", "sea going": 0},
						{name:'Thief', ec: 1, skill: 'Dicing',skill_cost: 5, skill_group:'Gambling', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Card playing',skill_cost: 4, skill_group:'Gambling', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Boardgaming',skill_cost: 3, skill_group:'Gambling', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Wagering',skill_cost: 4, skill_group:'Gambling', sheet_group: 'Formula Skills', level: 0},
						{name:'Thief', ec: 1, skill: 'Cheating',skill_cost: 8, skill_group:'Gambling', sheet_group: 'Formula Skills', level: 0},				
						{name:'Martial Artist', ec: 1, skill: 'Kick', skill_cost: 8, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Flying Kick', skill_cost: 10, skill_group:'Attacks', sheet_group: 'AR Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Throw', skill_cost: 5, skill_group:'Grapple Skills', sheet_group: 'AR Skills', level: 0},
						{name:'Martial Artist', ec: 1, skill: 'Grapple', skill_cost: 3, skill_group:'Grapple Skills', sheet_group: 'AR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Morningstar', skill_cost: 4, skill_group: 'Articulated Weapons', sheet_group: 'AR Skills', level: 0}
					];
	    		}else if (value=="Empire of Alphatia"){
	    			nation_bonus = [
							{name:'Fighter', ec: 2,skill: 'Dagger', skill_cost: 1, skill_group: 'Sword Weapons', sheet_group: 'AR Skills', level: 0},
							{name:'Fighter', ec: 2,skill: 'Staff', skill_cost: 6, skill_group: 'Club Weapons', sheet_group: 'AR Skills', level: 0}
					];
	    		}else if (value=="Kingdom of Rockhome"){
		    		nation_bonus = [
			    		{skill:"Jewel Smithing",skill_cost:5, skill_group:"", level: 0},
						{skill:"Brass smithing",skill_cost:3, skill_group:"smith", level: 0},
						{skill:"Foundry",skill_cost:3, skill_group:"smith", level: 0},
						{skill:"Armorer",skill_cost:6, skill_group:"smith", level: 0},
						{skill:"Bladesmithing",skill_cost:6, skill_group:"smith", level: 0},
						{skill:"Goldsmith",skill_cost:6, skill_group:"smith", level: 0},
						{skill:"Blacksmithing",skill_cost:4, skill_group:"smith", level: 0},
						{skill:"Stone cutting",skill_cost:3, skill_group:"", level: 0},
				    	{name:'Fighter', ec: 2,skill: 'Hammer', skill_cost: 2, skill_group: 'Club Weapons', sheet_group: 'AR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Hand Axe', skill_cost: 2, skill_group: 'Axe Weapons', sheet_group: 'AR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Double Axe', skill_cost: 4, skill_group: 'Axe Weapons', sheet_group: 'AR Skills', level: 0},
						{name:'Fighter', ec: 2,skill: 'Cross Bow', skill_cost: 4, skill_group: 'Archery', level: 0}
					];
	    		}
	    		self.chosen_bonus=nation_bonus;
	    	};

			

			self.getSkills = function(skillgroup) {
				console.log("getskills");
				console.log("skillgroup = "+skillgroup);
				var result = (self.selectedLearned || [])
				.filter(function (profession) {
			    	return profession.skill_group === skillgroup;
				});
				var bonus = self.chosen_bonus;
				var alteredResult=alterByNationality(result,bonus);
				console.log("result="+JSON.stringify(result));
				return result;
			};
			
		  	// Page changed handler
		  	self.pageChanged = function() {
		   		self.offset = (self.currentPage - 1) * self.pageSize;
		  	};
	
	        // self.closest = function(arr,num) {
	
	        //     var curr = arr[0];
	        //     var diff = Math.abs (num - curr);
	
	        //     for (var val = 0; val < arr.length; val++) {
	        //     	var newweight=arr[val];
	        //     	if (newweight>num){
	        //     		curr=arr[val];
	        //     	}
	        //         // var newdiff = Math.abs (num - arr[val]);
	        //         // if (newdiff < diff) {
	        //         //     console.log(" newdiff "+newdiff+" is less than "+diff);
	        //         //     diff = newdiff;
	        //         //     curr = arr[val];
	        //         //         console.log(" newdiff is "+newdiff+"diff is "+diff+" num is "+num + " and curr is "+curr);
	        //         // }
	        //     }
	        //         // console.log("curr = "+curr);
	        //     return curr;
	        // };
            self.closest = function(arr, closestTo){

		    var closest = Math.max.apply(null, arr); //Get the highest number in arr in case it match nothing.
		
			    for(var i = 0; i < arr.length; i++){ //Loop the array
			        if(arr[i] >= closestTo && arr[i] < closest) closest = arr[i]; //Check if it's higher than your number, but lower than your closest value
			    }
			
			    return closest; // return the value
			}
			
            
	 	// 	self.closest = function(array, target) {
			// 	console.log("beginning getClosest()");
			// 	console.log("array=="+array);
			// 	console.log("target=="+target);
				
			// 	var tuples = Array.prototype.map(function(val) {
			// 		console.log("beginning map)");
			//     	console.log(array);
			//     	console.log(val);
			//         return [val, Math.abs(val - target)];
			//     });
			//     console.log("tuples=="+tuples);
			//     return Array.prototype.reduce(function(memo, val) {
			//     	console.log(memo);
			//         return (memo[1] < val[1]) ? memo : val;
			//     }, [-1, 999])[0];
			// };
			self.nativeskillsarray=[];
			self.learnedskillsarray=[];
			// Create new Charactersheet
			self.create = function() {
				console.log("saving...");
				//console.log("sigh");
				// Create new Charactersheet object
				// var learnedskillsarrayObjects=this.getProfessionObjects;
				var nativeskillsarray=self.native_skills;
				nativeskillsarray=nativeskillsarray.filter(function(nativeskill){
					if (nativeskill.level!=0){
						return true;
					}else{
						return false;
					}
				});
				
				console.log("filtered native skills; "+JSON.stringify(nativeskillsarray));
				
				
				var learnedskillsarray=self.professions;
				// console.log("learnedskillsarrayObjects=self.getProfessionObjects="+learnedskillsarrayObjects)
				// console.log("learnedskillsarray="+JSON.stringify(learnedskillsarray));
				// console.log(typeof learnedskillsarray());
				// console.log("this."+JSON.stringify(self.purchasedlearnedskills));
				// console.log("self.professions"+JSON.stringify(self.professions));
				// console.log("$scope="+JSON.stringify($scope));
				
				learnedskillsarray=learnedskillsarray.filter(function(profession){
					if (profession.level!=0){
						return true;
					}else{
						return false;
					}
				});
				console.log("filtered professions; "+JSON.stringify(learnedskillsarray));
				console.log("this.primestats; "+JSON.stringify(this.prime_stats));
			
				// var primestatsarray=this.prime_stats;
				
				var charactersheet = new Charactersheets ({
					name: this.name,
					description: this.description,
					race: this.race.name,
					nationality: this.nation.name,
					constitution: this.prime_stats[0].value,
					strength: this.prime_stats[1].value,
					dexterity: this.prime_stats[2].value,
					agility: this.prime_stats[3].value,
					talent: this.prime_stats[4].value,
					intelligence: this.prime_stats[5].value,
					judgement: this.prime_stats[6].value,
					will: this.prime_stats[7].value,
					zeal: this.prime_stats[8].value,
					charisma: this.prime_stats[9].value,
					appearance: this.prime_stats[10].value,
					socialstanding: this.prime_stats[11].value,
					
					consave: this.prime_stats[0].save,
					strsave: this.prime_stats[1].save,
					dexsave: this.prime_stats[2].save,
					agisave: this.prime_stats[3].save,
					talsave: this.prime_stats[4].save,
					intsave: this.prime_stats[5].save,
					judsave: this.prime_stats[6].save,
					wilsave: this.prime_stats[7].save,
					zeasave: this.prime_stats[8].save,
					chasave: this.prime_stats[9].save,
					appsave: this.prime_stats[10].save,
					socsave: this.prime_stats[11].save,
					level: this.level,
					height: this.height,
					weight: this.weight,
					dr: this.dr,
					ar: this.ar,
					dc: this.dc,
					sc: this.sc,
					lsp: this.lsp,
					nsp: this.nsp,
					nsp_per_level: this.nsp_per_level,
					lsp_per_level: this.lsp_per_level,
					mr: this.mr,
					hp: this.hp,
					hp_per_level: this.hp_per_level,
					fp: this.fp,
					fp_per_level: this.fp_per_level,
					mi: this.mi,
					rc: this.rc,
					pi: this.pi,
					mpr: this.mpr,
					ppr: this.ppr,
					purchasednativeskills: nativeskillsarray,
					purchasedlearnedskills:learnedskillsarray,
					pate_hp: this.pate_hp,
					l_eye: this.l_eye,
					r_eye: this.r_eye,
					mouth_jaw: this.mouth_jaw,
					neck: this.neck,
					throat: this.throat,
					l_hand: this.l_hand,
					lfa: this.lfa,
					lua: this.lua,
					rua: this.rua,
					l_chest: this.l_chest,
					r_chest: this.r_chest,
					rfa: this.rfa,
					r_hand: this.r_hand,
					abdoment: this.abdomen,
					groin: this.groin,
					l_thigh: this.l_thigh,
					r_thigh: this.r_thigh,
					l_calf: this.l_calf,
					r_calf: this.r_calf,
					l_foot: this.l_foot,
					r_foot: this.r_foot
				});
		//console.log("are you saved");
				// Redirect after save
				charactersheet.$save(function(response) {
					$location.path('charactersheets/' + response._id);
	
					// Clear form fields
					self.name = '';
				}, function(errorResponse) {
					self.error = errorResponse.data.message;
				});
			};

			// Remove existing Charactersheet
			self.remove = function(charactersheet) {
				if ( charactersheet ) { 
					charactersheet.$remove();
	
					for (var i in self.charactersheets) {
						if (self.charactersheets [i] === charactersheet) {
							self.charactersheets.splice(i, 1);
						}
					}
				} else {
					self.charactersheet.$remove(function() {
						$location.path('charactersheets');
					});
				}
			};
			
			self.currentHp=0;
			self.currentFp=0;
			self.currentNsp=0;
			self.currentLsp=0;
			
			self.increaseLevel = function (){
				// console.log("self.hp="+self.hp);
				// console.log("charactersheet.hp="+charactersheet.hp);
				var charactersheet = self.charactersheet;
				
				var level = Number(charactersheet.level-1 || 0);
				var hp = Number (charactersheet.hp || 0);
				var fp = Number (charactersheet.fp || 0);
				var nsp = Number (charactersheet.nsp || 0);
				var lsp = Number (charactersheet.lsp || 0);
				var fpIncrement = 2;
				var hpIncrement = Number (charactersheet.hp_per_level);
				var nspIncrement = Number (charactersheet.nsp_per_level);
				var lspIncrement = Number (charactersheet.lsp_per_level);
				
				hp = hp + hpIncrement*level;
				fp = fp + fpIncrement*level;
				nsp = nsp + nspIncrement*level;
				lsp = lsp + lspIncrement*level;
				
				self.currentHp=hp;
				self.currentFp=fp;
				self.currentNsp=nsp;
				self.currentLsp=lsp;
			};
			
			// Update existing Charactersheet
			self.update = function() {
				var charactersheet = self.charactersheet;
	
				charactersheet.$update(function() {
					$location.path('charactersheets/' + charactersheet._id);
				}, function(errorResponse) {
					self.error = errorResponse.data.message;
				});
			};
	
			// Find a list of Charactersheets
			self.find = function() {
				// console.log("finding list");
				self.charactersheets = Charactersheets.query();
			};

			// Find existing Charactersheet
			self.findOne = function() {
				// console.log("finding "+$stateParams.charactersheetId);
				self.charactersheet = Charactersheets.get({ 
					charactersheetId: $stateParams.charactersheetId
					
				});
				// console.log("character sheet retrieved: "+self.charactersheet);
				//self.race.name=self.charactersheet.race;
				
	
			};

			// Search for a charactersheet
			self.charactersheetSearch = function(charactersheet) {
				// console.info("Searching...");
				$location.path('charactersheets/' + charactersheet._id);
			};
			
			self.purchasedlearnedskills= [];
			    
		    self.oldvalue = '';


		    self.startUpdatingLearned = function(profession){
	    		console.log("being edited: "+JSON.stringify(profession));
		    	var oldvalue=angular.copy(self.selectedLearned);
		    	
		    	console.log("oldvalue is "+JSON.stringify(oldvalue));
		    	
		    	self.oldvalue=oldvalue;
		    };
			self.updateLearned = function(profession) {
	    		// console.log("edited: "+JSON.stringify(profession));
	    		
				var totallsp=Number(self.lsp || 0);
				var oldvalue=self.oldvalue;
				var totalspent=self.getLSPTotal();
				
				// console.log("totalspent is "+totalspent);
				if (totallsp-totalspent<0){
					// console.log("reverting to "+JSON.stringify(oldvalue));
					// console.log("self.professions is "+JSON.stringify(self.professions));
					
					// var index = self.professions.indexOf(profession);
					// self.professions[index] = oldvalue;
					self.selectedLearned=oldvalue;
				}else{
					var oldvalue=angular.copy(self.selectedLearned);
		    		// console.log("updating: oldvalue is "+JSON.stringify(oldvalue));
					self.oldvalue=oldvalue;
					// var learnedskillsarray=(self.selectedLearned || []).
					// filter(function (profession){
					// 	return profession.level>0;
					// });
					
					// var previousSkillGroup="";
					// var currentCost = 0;
					// var groupArr=[];
					
					// // var skillsObj=updateObj(learnedskillsarray);             
					// // console.log("skillsObj="+JSON.stringify(skillsObj));
					// // self.obj=skillsObj;
					
					// var totalLsp = Number(self.totalLsp || 0);
					
					// countNumberOfProfessions(skillsObj);
					
					// whatPercent(totalLsp,learnedskillsarray);


	// 				for (var val = 0; val < learnedskillsarray.length; val++) {
		        	
	// 		        	var skill=learnedskillsarray[val];
	// console.log("skill is "+JSON.stringify(skill));
	
	
	// 		    		if (skill.name===previousSkillGroup){
	// 		    			var totalCost = skill.level*skill.name;
	// 		    			currentCost=currentCost+totalCost;
			    			
	// 		    		}
	// 				}
					
				}
				
				
			};
			
			function updateObj(arr) {
				// console.log("----------passed in array is "+JSON.stringify(arr));
				// var obj=self.obj;
				var obj={};
				var newArray=[];
				arr.forEach(function(el) {
					// console.log("*********el is "+JSON.stringify(el));
					var key = el.skill;
					obj[key] = obj[key] || { name: "", ec: 0, total: 0, level: 0, cost: 0 };
					obj[key].name=el.name;
					// var totalCost=(el.skill_cost*el.level);
					obj[key].ec = el.ec;
					// obj[key].skill = el.skill;
					obj[key].level = el.level;
					obj[key].cost = el.skill_cost;
					obj[key].total = obj[key].cost * obj[key].level;
					newArray.push(obj);
				});
				return newArray;
			}
			
			self.obj={};
			

			
			function whatPercent(totalToSpend,resultArray) {
			   var i,
			       total,
			       count = 0,
			       currName="",
			       previousName="";
			       
			       console.log("inside whatPercent with "+JSON.stringify(resultArray)+" "+resultArray.length);
			   for (i=0; i < resultArray.length; i++){
					currName=resultArray[i].name;
					
					if (resultArray[i].name!=previousName){
						total=0;
						total=Number(resultArray[i].skill_cost*resultArray[i].level || 0);
						console.log("i is "+i+" total is "+total+" currName is "+currName+" previousName is "+previousName);
						previousName=currName;
						console.log("total is "+total+" currName is "+currName+" previousName is "+previousName);
						
					}else{
						total=total+Number(resultArray[i].skill_cost*resultArray[i].level || 0);
							console.log("total is "+total+" distribution percentage for "+resultArray[i].name+" is "+total/totalToSpend*100);

						}
				}
			}

			
			// self.totalForProfession=0;
			self.getLSPTotal = function(){
			    var total = 0;
			    // console.log("total lsp is "+total);
			    for(var i = 0; i < self.selectedLearned.length; i++){
			        var profession = self.selectedLearned[i];
			        total += (profession.level * profession.skill_cost);
			    }
			    // console.log("total lsp is "+total);
			    
			    return total;
			};
			
			
		    self.startUpdatingNative = function(nativeskill){
		    	var oldvalue=angular.copy(self.selectedNative);
		    	console.log("updating"+JSON.stringify(nativeskill));
		    	
		    	self.oldvalue=oldvalue;
		    };
		    
			self.updateNative = function(nativeskill) {
	    		// console.log("inside updateNative");
				var totalnsp=Number(self.nsp || 0);
				var oldvalue=self.oldvalue;
				var totalspent=self.getNSPTotal();
				
				// console.log("totalspent is "+totalspent);
				if (totalnsp-totalspent<0){
					// console.log("reverting to "+JSON.stringify(oldvalue));

					self.selectedNative=oldvalue;
				}else{
					var oldvalue=angular.copy(self.selectedNative);
					self.oldvalue=oldvalue;
				}
				
				
			};
		
			self.getNSPTotal = function(){
			    var total = 0;
			    // console.log("total is "+total);
			    for(var i = 0; i < self.selectedNative.length; i++){
			        var nativeskill = self.selectedNative[i];
			        total += (nativeskill.level * nativeskill.skill_cost);
			    }
			    // console.log("total is "+total);
			    
			    return total;
			};
		
		
			self.difference = 0;

			self.prime_stats=[
		    	{'name':'constitution','value':1, save:20, 'group':'physical'},
		    	{'name':'strength','value':1, save:20, 'group':'physical'},		    	
		    	{'name':'dexterity','value':1, save:20, 'group':'physical'},
		    	{'name':'agility','value':1, save:20, 'group':'physical'},
		    	{'name':'talent','value':1, save:20, 'group':'mental'},		    	
		    	{'name':'intelligence','value':1, save:20, 'group':'mental'},
		    	{'name':'judgement','value':1, save:20, 'group':'mental'},
		    	{'name':'will','value':1, save:20, 'group':'mental'},		    	
		    	{'name':'zeal','value':1, save:20, 'group':'social'},
		    	{'name':'charisma','value':1, save:20, 'group':'social'},
		    	{'name':'appearance','value':1, save:20, 'group':'social'},		    	
		    	{'name':'socialstanding','value':1, save:20, 'group':'social'}
		    ];

		    
			self.min = 1;
			self.max = 24;
      
			// self.$watch('prime_stats', function(newValue, oldValue) { 
			// 	console.log("newvalue is "+newValue+" and oldvalue is "+oldValue);
		
			// 	var constitution = Number(self.constitution || 0);
			// 	var strength = Number(self.strength || 0);
			// 	var agility = Number(self.agility || 0);
			// 	var dexterity = Number(self.dexterity || 0);
			// 	var talent = Number(self.talent || 0);
			// 	var intelligence = Number(self.intelligence || 0);
			// 	var judgement = Number(self.judgement || 0);
			// 	var will = Number(self.will || 0);
			// 	var zeal = Number(self.zeal || 0);
			// 	var charisma = Number(self.charisma || 0);
			// 	var appearance = Number(self.appearance || 0);
			// 	var socialstanding = Number(self.socialstanding || 0);
			// 	var total = Number (self.totalstats || 0);
		
			// 	var sum = constitution+strength+dexterity+agility+talent+intelligence+judgement+will+zeal+charisma+appearance+socialstanding;
				
			// 	if (sum>total){
			// 		console.log("sum is greater than total: sum is "+sum+" and total is "+total);
			// 		self.constitution=oldValue;
			// 	}else{
			// 		console.log("sum is "+sum+" and total is "+total);
			// 	   self.addNumbers();
			// 	}
			// });
	
			self.oldstats='';
			self.beginStatUpdate = function(stat){
	    		// console.log("being edited: "+JSON.stringify(stat));
		    	var oldstats=angular.copy(self.prime_stats);
		    	
		    	// console.log("oldvalue is "+JSON.stringify(oldstats));
		    	
		    	self.oldstats=oldstats;
		    };
	    
	    	self.totalPrime=0;
	    	
			self.endStatUpdate = function(stat) {
	    		// console.log("edited: "+JSON.stringify(stat));
	    		
				var totalstats=Number(self.totalstats || 0);
				var oldstats=self.oldstats;
				var totalspent=self.getStatTotal();
				var difference=totalstats-totalspent;
				
				// console.log("totalstats is "+totalstats+" totalspent is "+totalspent+" difference is "+difference);
				if (difference<0){
					// console.log("reverting to "+JSON.stringify(oldstats));
					// console.log("self.professions is "+JSON.stringify(self.professions));
					
					// var index = self.professions.indexOf(profession);
					// self.professions[index] = oldvalue;
					self.prime_stats=oldstats;
				}else{
					var oldstats=angular.copy(self.prime_stats);
		    		// console.log("updating: oldvalue is "+JSON.stringify(oldstats));
					self.oldstats=oldstats;
					self.totalstats=totalstats;
					self.difference=difference;
					self.addNumbers();
					self.getPhysicalMentalSpiritual();
				}
				
				
			};
			
			self.physical=4;
			self.mental=4;
			self.social=4;
			
			self.getStatTotal = function(){
				var total = 0;
			    // console.log("total is "+total);
			    var physical =0;
			    var mental=0;
			    var social=0;

			    for(var i = 0; i < self.prime_stats.length; i++){
			        var stat = self.prime_stats[i];

			        total += (stat.value);
			    }
			    // console.log("total is "+total);
			    
			    return total;
			};
			
			self.isLessThan = function(grouping){
				if (grouping>35){
					return false;
				}else{
					return true;
				}
				
			};
			self.howManyUniqueElements = function(data){
				var unique = {};
				
				var distinct = [];
				for( var i in data ){
					if( typeof(unique[data[i].name]) == "undefined"){
			    		distinct.push(data[i].name);
				     }
				     unique[data[i].name] = 0;
			    }
				return distinct;
			};
			
			
			  //self.name = 'World';
			  //self.brands = [{
			  //  "brand": "abc"
			  //}, {
			  //  "brand": "xyz"
			  //}, {
			  //  "brand": "abc"
			  //}, {
			  //  "brand": "abc"
			  //}, {
			  //  "brand": "por"
			  //}, {
			  //  "brand": "xyz"
			  //}];
			  //self.getProfessionCount = function(i) {
			  //  var iProfessionCount = iProfessionCount || 0;
			  //  for (var j = 0; j < self.brands.length; j++) {
			  //    if (self.brands[j].brand == i) {
			  //      iProfessionCount++;
			  //    }
			  //  }
			  //  return iProfessionCount;
			  //}
			
			
			
			self.isFullTime = function(data){


				if (angular.isUndefined(data)){
					return 0;
				}
				//else{
				//	key1=Number(key1 || 0);
				//	key2=Number(key2 || 0);
				//}
				var lsp = self.lsp;
				
				var sum = 0;
				
				var professions=self.howManyUniqueElements(data);
				
				var professionCount = professions.length;
				
				var percentThreshold=lsp/professionCount;
				
				
				// console.log("number of distinct units is "+professionCount);
				// console.log("percentThreshold is "+percentThreshold);
				// console.log("lsp is "+lsp);
				
				var ec = 0;
				
				for( var i in professions ){
					
					angular.forEach(data, function(v, k) {
						if ((v['name'])===professions[i].name){
							sum = sum + (parseInt(v['level']) * parseInt(v['skill_cost']));
						}
					});
					
					if (sum>percentThreshold){
						ec=ec+professions.ec;
					}
					
				}
				// console.log("ec is "+ec);
				// console.log("sum is "+sum);
				
				
				// console.log("sum is "+sum);
				// sum/lsp*100;
	    
			};
			
			self.getPhysicalMentalSpiritual = function(){

			    // console.log("total is "+total);
			    var physical =0;
			    var mental=0;
			    var social=0;

			    for(var i = 0; i < self.prime_stats.length; i++){
			        var stat = self.prime_stats[i];
			        	// console.log("stat group is "+stat.group);
			        if(stat.group=="physical"){
			        	physical+=stat.value;
			        }else if (stat.group=="mental"){
			        	mental+=stat.value;
			        }else if (stat.group=="social"){
			        	social+=stat.value;
			        }
			        
			    }
			    
			        
			        self.physical=physical;
			        self.mental=mental;
			        self.social=social;

			};
      
	        self.addNumbers = function() {
	            var strength = Number(self.prime_stats[1].value || 0);
	    		var height = Number(self.height || 0);
	            var heightindex = height - 31;
	            var raceindex = Number(self.raceindex || 0);
	            
	            self.weightmodifier = self.weight_table[heightindex][raceindex];
	            var weightmodifier = Number(self.weightmodifier || 0);
	            self.baseweight= self.weight_table[heightindex][2];
	            var baseweight = Number(self.baseweight || 0);
	            self.weight = baseweight + weightmodifier * strength;
	
	            self.getSecondaryStats();
	        };
        
        
		self.getSecondaryStats = function(){
			
			// console.log("generate saves.");
			var prime_stats=self.prime_stats;
			
			for (var x = 0; x < prime_stats.length; x++) {
				switch (prime_stats[x].value) {
				    case 1:
				    	prime_stats[x].save=20;
				    case 2:
				    	prime_stats[x].save=20;
				    case 3:
				    	prime_stats[x].save=20;
				    	break;
				    case 4:
				    	prime_stats[x].save=19;
				    case 5:
				    	prime_stats[x].save=19;
				    case 6:
				    	prime_stats[x].save=19;
				    	break;
				    case 7:
				    	prime_stats[x].save=18;
				    case 8:
				    	prime_stats[x].save=18;
				    case 9:
				    	prime_stats[x].save=18;
				    	break;
				    case 10:
				    	prime_stats[x].save=17;
				    case 11:
				    	prime_stats[x].save=17;
				    case 12:
				    	prime_stats[x].save=17;
				    	break;
				    case 13:
				    	prime_stats[x].save=16;
				    case 14:
				    	prime_stats[x].save=16;
				    case 15:
				    	prime_stats[x].save=16;
				    	break;
				    case 16:
				    	prime_stats[x].save=15;
				    case 17:
				    	prime_stats[x].save=15;
				    case 18:
				    	prime_stats[x].save=15;
				    	break;
				    case 19:
				    	prime_stats[x].save=14;
				    case 20:
				    	prime_stats[x].save=14;
				    case 21:
				    	prime_stats[x].save=14;
				    	break;
				    case 22:
				    	prime_stats[x].save=13;
				    case 23:
				    	prime_stats[x].save=13;
				    case 24:
				    	prime_stats[x].save=13;
				    	break;
				}
			}
	    		
			// console.log("begin getSecondaryStats()");
            var constitution = Number(self.prime_stats[0].value || 0);
            var strength = Number(self.prime_stats[1].value || 0);
            var dexterity = Number(self.prime_stats[2].value || 0);
            var agility = Number(self.prime_stats[3].value || 0);
            var talent = Number(self.prime_stats[4].value || 0);
            var intelligence = Number(self.prime_stats[5].value || 0);
            var judgement = Number(self.prime_stats[6].value || 0);
            var will = Number(self.prime_stats[7].value || 0);
            var zeal = Number(self.prime_stats[8].value || 0);
            var charisma = Number(self.prime_stats[9].value || 0);
            var appearance = Number(self.prime_stats[10].value || 0);
            var socialstanding = Number(self.prime_stats[11].value || 0);
            
			// console.log("getting...MR");

			// console.log("strength is "+strength);
			// console.log("dexterity is "+dexterity);
			if (strength!=0){
				if (dexterity!=0){
					//get MR
					var mr = self.mr_table[strength-1][dexterity-1];
					self.mr = mr;
					// console.log("mr is "+mr);
					//get RC
					var rc = self.rc_table[strength-1][dexterity-1];
					self.rc = rc;
					// console.log("rc is "+rc);
				}
	            var headerarray=self.sc_table[0];
	            
	            self.headerarray=headerarray;

				// console.log("getting...sc");

	           //get SC
				var weight = Number(self.weight || 0);
	            self.sc_index=headerarray.indexOf( self.closest(headerarray,weight));
	            
	            var sc_index = Number(self.sc_index || 0);
				var sc_array = self.sc_table[1];
				var sc = sc_array[sc_index];
				// console.log("sc_index="+sc_index);
				// console.log("sc_array="+sc_array);
				self.sc = sc;

				// console.log("getting...dc");
				//get DC
				// var sc = Number(self.sc || 0);
				self.dc = self.dc_table[strength-1][sc-1];
				

				//get AR
				var toprow = dexterity - sc + 21;
				self.ar = self.ar_table[strength-1][toprow];
				// console.log("ar toprow "+toprow);
				
				//get DR
				toprow = agility - sc + 21;
				self.dr = self.dr_table[dexterity-1][toprow];
				// console.log("dr toprow "+toprow);
				
				// console.log("sizeclass index is "+sc-1);
				// console.log("constitution index is "+constitution-1);
				
				//get HP
				self.hp = self.hp_table[constitution-1][sc-1];
				

				// console.log("hp per level");
				//get HP per level
				self.hp_per_level = self.hp_per_table[constitution-1][sc-1];
				

				// console.log("get fp");
				if (constitution!=0){
					//get FP
					self.fp = self.fp_table[constitution-1][0];
					self.fp_per_level = 2;
				}
			}
			
			// console.log("get nsp");
			if (intelligence!=0){
				if(socialstanding!=0){
					//get NSP
					self.nsp = self.nsp_table[intelligence-1][socialstanding-1];
					
					//get NSP per
					self.nsp_per_level = self.nsp_per_table[intelligence-1][socialstanding-1];
				}
			}

			// console.log("get lsp");
			if (will!=0){
				if (judgement!=0){
					//get LSP
					self.lsp = self.lsp_table[will-1][judgement-1];
					
					//get LSP per
					self.lsp_per_level = self.lsp_per_table[will-1][judgement-1];
					
					//get MI
					self.mi = self.mi_table[judgement-1][will-1];	
				}
			}

			// console.log("get magic");
			if (zeal!=0){
				//get PI
				self.pi = zeal*5;
				
				//get MPR/PPR
				self.mpr = talent*talent;
				self.ppr=zeal*zeal;
			}

			// console.log("end getSecondaryStats()");
		};

		$scope.$watch('hp', function(newValue, oldValue) {
			//get located
			self.pate_hp = Number(Math.ceil(self.hp*15/100) || 0);
			self.l_eye = Number(Math.ceil(self.hp*3/100) || 0);
			self.r_eye = Number(Math.ceil(self.hp*3/100) || 0);
			self.mouth_cheek = Number(Math.ceil(self.hp*10/100) || 0);
			self.throat = Number(Math.ceil(self.hp*5/100) || 0);
			self.lua = Number(Math.ceil(self.hp*18/100) || 0);
			self.lfa = Number(Math.ceil(self.hp*12/100) || 0);
			self.l_hand = Number(Math.ceil(self.hp*7/100) || 0);
			self.l_chest = Number(Math.ceil(self.hp*50/100) || 0);
			self.r_chest = Number(Math.ceil(self.hp*50/100) || 0);
			self.r_hand = Number(Math.ceil(self.hp*7/100) || 0);
			self.rfa = Number(Math.ceil(self.hp*12/100) || 0);
			self.rua = Number(Math.ceil(self.hp*18/100) || 0);
			self.abdomen = Number(Math.ceil(self.hp*45/100) || 0);
			self.groin = Number(Math.ceil(self.hp*35/100) || 0);
			self.l_thigh = Number(Math.ceil(self.hp*38/100) || 0);
			self.r_thigh = Number(Math.ceil(self.hp*38/100) || 0);
			self.l_calf = Number(Math.ceil(self.hp*26/100) || 0);
			self.r_calf = Number(Math.ceil(self.hp*26/100) || 0);
			self.l_foot = Number(Math.ceil(self.hp*10/100) || 0);
			self.r_foot = Number(Math.ceil(self.hp*10/100) || 0);
		});

		
    	self.getRandomHeight = function(value)
    	{
    		
    		if (value=="human"){
	        	self.minheight= 55;
	        	self.maxheight= 84;
	        	self.raceindex= 6;
	        	self.totalstats=144;
    		} else if (value=="hin"){
	        	self.minheight= 31;
	        	self.maxheight= 42;
	        	self.raceindex= 3;
	        	self.totalstats=150;
	        } else if (value=="elf"){
	        	self.minheight= 37;
	        	self.maxheight= 78;
	        	self.raceindex= 5;
	        	self.totalstats=148;
	        } else if (value=="dwarf"){
	        	self.minheight= 31;
	        	self.maxheight= 60;
	        	self.raceindex= 4;
	        	self.totalstats=146;
	        }
    		
    		
    		// console.log("generating height.");
    		self.height=Math.floor(Math.random() * (self.maxheight - self.minheight + 1)) + self.minheight;
    		
			self.addNumbers();
    	};

		// self.addEc = function(amt,e) { 
		// 	// console.log(e);
		// 	// console.log("adding ec");
		// 	var total = Number(self.totalEc || 0);
	 //       if(e.target.checked){
	 //           total = total + amt;
	 //       } else {
	 //           total = total - amt;
	 //       }
	 //       self.totalEc = total;
	 //       // console.log(self.totalEc);
	 //   };
    	self.skilleffect="";
    	self.effect = function(level,group) { 
    		
			if (group=="Club Weapons"){
				var ar = Number(self.ar || 0);
				ar = ar + level;
				self.skilleffect="AR="+ar;
			}

	    };
    	
	}
]);
})();